{"ast":null,"code":"import _toConsumableArray from\"/Users/macintoshhd/Documents/Developpement/Web/Project/Shopify/Ecommerce-Shopify-master/frontend-shopify-ecommerce/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/macintoshhd/Documents/Developpement/Web/Project/Shopify/Ecommerce-Shopify-master/frontend-shopify-ecommerce/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createReducer}from\"@reduxjs/toolkit\";var initialState={cart:localStorage.getItem(\"cartItems\")?JSON.parse(localStorage.getItem(\"cartItems\")):[]};export var cartReducer=createReducer(initialState,{addToCart:function addToCart(state,action){var item=action.payload;/* The line `const isItemExist = state.cart((i) => i._id == item._id);` is checking if an item with \n   the same `_id` as the `item` being added already exists in the `cart` array. */ //[19.48]\nvar isItemExist=state.cart.find(function(i){return i._id===item._id;});if(isItemExist){return _objectSpread(_objectSpread({},state),{},{/* The line `cart: state.cart.map((i) => (i._id === isItemExist._id ? item : i))` is updating the\n      `cart` array in the state. */cart:state.cart.map(function(i){return i._id===isItemExist._id?item:i;})});}else{return _objectSpread(_objectSpread({},state),{},{/* The line `cart: [...state.cart, item],` is adding the `item` to the `cart` array in the\n       state. It uses the spread operator (`...`) to create a new array that includes all the\n       elements from the existing `state.cart` array, and then appends the `item` to the end of the\n       new array. This ensures that the original `state.cart` array is not mutated, and a new array\n       is created with the updated items. */cart:[].concat(_toConsumableArray(state.cart),[item])});}},// Remove from cart\nremoveFromCart:function removeFromCart(state,action){return _objectSpread(_objectSpread({},state),{},{cart:state.cart.filter(function(i){return i._id!==action.payload;})});}});","map":{"version":3,"names":["createReducer","initialState","cart","localStorage","getItem","JSON","parse","cartReducer","addToCart","state","action","item","payload","isItemExist","find","i","_id","_objectSpread","map","concat","_toConsumableArray","removeFromCart","filter"],"sources":["/Users/macintoshhd/Documents/Developpement/Web/Project/Shopify/Ecommerce-Shopify-master/frontend-shopify-ecommerce/src/redux/reducers/cart.js"],"sourcesContent":["import { createReducer } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  cart: localStorage.getItem(\"cartItems\")\n    ? JSON.parse(localStorage.getItem(\"cartItems\"))\n    : [],\n};\n\nexport const cartReducer = createReducer(initialState, {\n  addToCart: (state, action) => {\n    const item = action.payload;\n    /* The line `const isItemExist = state.cart((i) => i._id == item._id);` is checking if an item with \n   the same `_id` as the `item` being added already exists in the `cart` array. */ //[19.48]\n    const isItemExist = state.cart.find((i) => i._id === item._id);\n    if (isItemExist) {\n      return {\n        ...state,\n        /* The line `cart: state.cart.map((i) => (i._id === isItemExist._id ? item : i))` is updating the\n      `cart` array in the state. */\n        cart: state.cart.map((i) => (i._id === isItemExist._id ? item : i)),\n      };\n    } else {\n      return {\n        ...state,\n        /* The line `cart: [...state.cart, item],` is adding the `item` to the `cart` array in the\n       state. It uses the spread operator (`...`) to create a new array that includes all the\n       elements from the existing `state.cart` array, and then appends the `item` to the end of the\n       new array. This ensures that the original `state.cart` array is not mutated, and a new array\n       is created with the updated items. */\n        cart: [...state.cart, item],\n      };\n    }\n  },\n\n  // Remove from cart\n  removeFromCart: (state, action) => {\n    return {\n      ...state,\n      cart: state.cart.filter((i) => i._id !== action.payload),\n    };\n  },\n});\n"],"mappings":"uZAAA,OAASA,aAAa,KAAQ,kBAAkB,CAEhD,GAAM,CAAAC,YAAY,CAAG,CACnBC,IAAI,CAAEC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CACnCC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAC7C,EACN,CAAC,CAED,MAAO,IAAM,CAAAG,WAAW,CAAGP,aAAa,CAACC,YAAY,CAAE,CACrDO,SAAS,CAAE,SAAAA,UAACC,KAAK,CAAEC,MAAM,CAAK,CAC5B,GAAM,CAAAC,IAAI,CAAGD,MAAM,CAACE,OAAO,CAC3B;AACJ,kFADI,CAC+E;AAC/E,GAAM,CAAAC,WAAW,CAAGJ,KAAK,CAACP,IAAI,CAACY,IAAI,CAAC,SAACC,CAAC,QAAK,CAAAA,CAAC,CAACC,GAAG,GAAKL,IAAI,CAACK,GAAG,GAAC,CAC9D,GAAIH,WAAW,CAAE,CACf,OAAAI,aAAA,CAAAA,aAAA,IACKR,KAAK,MACR;AACR,mCACQP,IAAI,CAAEO,KAAK,CAACP,IAAI,CAACgB,GAAG,CAAC,SAACH,CAAC,QAAM,CAAAA,CAAC,CAACC,GAAG,GAAKH,WAAW,CAACG,GAAG,CAAGL,IAAI,CAAGI,CAAC,EAAC,CAAC,GAEvE,CAAC,IAAM,CACL,OAAAE,aAAA,CAAAA,aAAA,IACKR,KAAK,MACR;AACR;AACA;AACA;AACA,4CACQP,IAAI,IAAAiB,MAAA,CAAAC,kBAAA,CAAMX,KAAK,CAACP,IAAI,GAAES,IAAI,EAAC,GAE/B,CACF,CAAC,CAED;AACAU,cAAc,CAAE,SAAAA,eAACZ,KAAK,CAAEC,MAAM,CAAK,CACjC,OAAAO,aAAA,CAAAA,aAAA,IACKR,KAAK,MACRP,IAAI,CAAEO,KAAK,CAACP,IAAI,CAACoB,MAAM,CAAC,SAACP,CAAC,QAAK,CAAAA,CAAC,CAACC,GAAG,GAAKN,MAAM,CAACE,OAAO,GAAC,GAE5D,CACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}